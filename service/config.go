package service

import (
	"strconv"
	"strings"

	template "github.com/dedis/student_19_cruxIPFS"
)

// IPFSConfigName name of the config file generated by IPFS
const IPFSConfigName string = "config"

// ClusterConfigName name of the config file generated by ipfs cluster
const ClusterConfigName string = "service.json"

// DefaultTransportProtocol default transport protocol
const DefaultTransportProtocol string = "/tcp/"

// DefaultIPFSSwarmPort default swarm port for ipfs
const DefaultIPFSSwarmPort string = DefaultTransportProtocol + "4001"

// DefaultIPFSAPIPort default API port for ipfs
const DefaultIPFSAPIPort string = DefaultTransportProtocol + "5001"

// DefaultIPFSGatewayPort default gateway port for ipfs
const DefaultIPFSGatewayPort string = DefaultTransportProtocol + "8080"

// DefaultClusterRestAPIPort default port for rest api in ipfs cluster
const DefaultClusterRestAPIPort string = DefaultTransportProtocol + "9094"

// DefaultClusterIPFSProxyPort default port for the ipfs proxy of ipfs cluster
const DefaultClusterIPFSProxyPort string = DefaultTransportProtocol + "9095"

// DefaultClusterPort default port that ipfs cluster uses to communicate
const DefaultClusterPort string = DefaultTransportProtocol + "9096"

// SecretStr string value of the secret field
const SecretStr string = "secret"

// PeernameStr string value of the peername field
const PeernameStr string = "peername"

// EditIPFSConfig edit the ipfs configuration file
func EditIPFSConfig(ports *template.IPFSPorts, path string) error {
	// load the config
	filepath := path + "/" + IPFSConfigName
	conf, err := ReadConfig(filepath)
	if err != nil {
		return err
	}

	// replace the ports
	conf = strings.ReplaceAll(conf, DefaultIPFSSwarmPort,
		DefaultTransportProtocol+strconv.Itoa(ports.Swarm))
	conf = strings.ReplaceAll(conf, DefaultIPFSAPIPort,
		DefaultTransportProtocol+strconv.Itoa(ports.API))
	conf = strings.ReplaceAll(conf, DefaultIPFSGatewayPort,
		DefaultTransportProtocol+strconv.Itoa(ports.Gateway))

	// write the modified config
	err = WriteConfig(filepath, conf)
	if err != nil {
		return err
	}

	return nil
}

// EditClusterConfig edit the cluster configuration file with the ports, cluster
// secret and peername
func EditClusterConfig(ports template.ClusterPorts,
	path, peername, secret string) error {

	// load the config
	filepath := path + "/" + ClusterConfigName
	conf, err := ReadConfig(filepath)
	if err != nil {
		return err
	}

	// replace cluster ports
	conf = strings.ReplaceAll(conf, DefaultIPFSAPIPort,
		DefaultTransportProtocol+strconv.Itoa(ports.IPFSAPI))
	conf = strings.ReplaceAll(conf, DefaultClusterRestAPIPort,
		DefaultTransportProtocol+strconv.Itoa(ports.RestAPI))
	conf = strings.ReplaceAll(conf, DefaultClusterIPFSProxyPort,
		DefaultTransportProtocol+strconv.Itoa(ports.IPFSProxy))
	conf = strings.ReplaceAll(conf, DefaultClusterPort,
		DefaultTransportProtocol+strconv.Itoa(ports.Cluster))

	// replace secret
	//conf = ReplaceField(conf, SecretStr, secret)

	// replace peername
	//conf = ReplaceField(conf, PeernameStr, peername)

	// write config
	err = WriteConfig(filepath, conf)
	if err != nil {
		return err
	}

	return nil
}

// ReplaceField replace a json field in a config
func ReplaceField(conf, identifier, value string) string {
	i := strings.Index(conf, identifier)
	nLine := strings.Index(conf[i:], "\n")

	conf = strings.ReplaceAll(conf, conf[i:i+nLine],
		identifier+"\": \""+value+"\",")
	return conf
}
