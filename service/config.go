package service

import (
	"fmt"
	"os/exec"
	"strings"
)

// IPFSConfigName name of the config file generated by IPFS
const IPFSConfigName string = "config"

// ClusterConfigName name of the config file generated by ipfs cluster
const ClusterConfigName string = "service.json"

// IPVersion default ip version
const IPVersion string = "/ip4/"

// TransportProtocol default transport protocol
const TransportProtocol string = "/tcp/"

// SecretStr string value of the secret field
const SecretStr string = "secret"

// PeernameStr string value of the peername field
const PeernameStr string = "peername"

// SwarmPort default IPFS swarm port
const SwarmPort string = "4001"

// APIPort default IPFS API port
const APIPort string = "5001"

// GatewayPort default IPFS gateway port
const GatewayPort string = "8080"

// EditIPFSConfig edit the ipfs configuration file (mainly the ip)
func EditIPFSConfig(path, ip string) {
	addr := IPVersion + ip + TransportProtocol

	// /ip4/127.0.0.1/tcp/5001
	API := MakeJSONElem(addr + APIPort)
	// /ip4/127.0.0.1/tcp/8080
	Gateway := MakeJSONElem(addr + GatewayPort)

	// [\"/ip4/0.0.0.0/tcp/5001\", \"/ip6/::/tcp/5001\"]
	//swarmList := []string{addr + SwarmPort}
	Swarm := MakeJSONArray([]string{addr + SwarmPort})
	EditIPFSField(path, "Addresses.API", API)
	EditIPFSField(path, "Addresses.Gateway", Gateway)
	EditIPFSField(path, "Addresses.Swarm", Swarm)
}

/*
// EditClusterConfig edit the cluster configuration file with the ports, cluster
// secret and peername
func EditClusterConfig(ports template.ClusterPorts,
	path, peername, secret string) error {

	// load the config
	filepath := path + "/" + ClusterConfigName
	conf, err := ReadConfig(filepath)
	if err != nil {
		return err
	}

	// replace cluster ports
	conf = strings.ReplaceAll(conf, DefaultIPFSAPIPort,
		TransportProtocol+strconv.Itoa(ports.IPFSAPI))
	conf = strings.ReplaceAll(conf, DefaultClusterRestAPIPort,
		TransportProtocol+strconv.Itoa(ports.RestAPI))
	conf = strings.ReplaceAll(conf, DefaultClusterIPFSProxyPort,
		TransportProtocol+strconv.Itoa(ports.IPFSProxy))
	conf = strings.ReplaceAll(conf, DefaultClusterPort,
		TransportProtocol+strconv.Itoa(ports.Cluster))

	// replace secret
	//conf = ReplaceField(conf, SecretStr, secret)

	// replace peername
	//conf = ReplaceField(conf, PeernameStr, peername)

	// write config
	err = WriteConfig(filepath, conf)
	if err != nil {
		return err
	}

	return nil
}
*/

// ReplaceField replace a json field in a config
func ReplaceField(conf, identifier, value string, coma bool) string {
	i := strings.Index(conf, identifier)
	nLine := strings.Index(conf[i:], "\n")

	conf = strings.ReplaceAll(conf, conf[i:i+nLine],
		identifier+"\": \""+value+"\"")
	if coma {
		conf += ","
	}
	return conf
}

// MakeJSONElem make a JSON single element
func MakeJSONElem(elem string) string {
	// \"elem\"
	return "\\\"" + elem + "\\\""
}

// MakeJSONArray make a json array from the given elements
func MakeJSONArray(elements []string) string {
	// "[
	str := "\"["
	for _, e := range elements {
		// \"elem\"
		str += "\\\"" + e + "\\\""
	}
	// str + ]"
	return str + "]\""
}

// EditIPFSField with the native IPFS config command
func EditIPFSField(path, field, value string) {
	cmd := "ipfs -c " + path + " config --json " + field + " " + value
	o, err := exec.Command("bash", "-c", cmd).Output()
	if err != nil {
		fmt.Println(cmd)
		fmt.Println(string(o))
		fmt.Println(err)
	}
}
